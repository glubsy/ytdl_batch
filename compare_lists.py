from sys import argv

# Objective: compare a given list of Youtube video Ids with another list
# and return the differences (the missing youtube video Ids from list1 and 
# vice-versa)
# Typically arguments are as follows:
# - list1 would be a list generated by the find_if_id.py module
# - list2 would be a list generated by playboard.py module
# - list3 would be the list of Ids advertised as deleted by Playboard, 
#   also generated by playboard.py module


def read_lines(file_path):
    with open(file_path, 'r') as f:
        for line in f.readlines():
            # Someone thought it was clever to imitate yt-dlp
            if line.startswith("youtube "):
                yield line.split("youtube ")[1].strip()
            else:
                yield line.strip()


def compare(list1, list2, list3=None):
    l1_ids = {id for id in read_lines(list1)}
    l2_ids = {id for id in read_lines(list2)}

    print(f"{len(l1_ids)} unique Ids in {list1}")
    print(f"{len(l2_ids)} unique Ids in {list2}")
    
    missing_from_l1 = {_id for _id in l1_ids if _id not in l2_ids}
    if missing_from_l1:
        # We don't really care much about this list, but it's good to know
        # what we have caught that Playboard did not
        print(f"{len(missing_from_l1)} Ids are only in {list1}:")
        for _id in missing_from_l1:
            print(_id)

    # Items advertised as deleted will probably never be recovered unfortunately
    deleted_in_pb = set()
    if list3 is not None:
        deleted_in_pb = {_id for _id in read_lines(list3)}

    missing_from_l2 = {
        _id for _id in l2_ids 
        if _id not in l1_ids
        and _id not in deleted_in_pb
    }
    if missing_from_l2:
        print(f"{len(missing_from_l2)} Ids are only in {list2}:")
        for _id in missing_from_l2:
            print(_id)


if __name__ == "__main__": 
  compare(argv[1], argv[2], argv[3])
